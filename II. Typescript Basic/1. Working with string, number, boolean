1. Type
- Kiểu trong Typescript là chữ thường: string, number, boolean


2. Khai báo biến
let number1: number = 5    // dư thừa vì Typescript auto nhận định được

let number1: number         // make sense
number1 = 5


3. Type with object
const person: object = {   // chưa có thêm thông tin về type của các properties
    name: 'Quan',             -> cần khai báo cụ thể hơn
    age: 28
}
console.log(person.name)

const person: {            // Typescript compiler hiểu
    name: string;
    age: number;
} = {
    name: 'Quan',
    age: 28
}


4. Nested Object and Types
const product = {
  id: 'abc1',
  price: 12.99,
  tags: ['great-offer', 'hot-and-new'],
  details: {
    title: 'Red Carpet',
    description: 'A great carpet - almost brand-new!'
  }
}

- This would be the type of such an object:
{
  id: string;
  price: number;
  tags: string[];
  details: {
    title: string;
    description: string;
  }
}


5. Type with Array
let hobbies: string[]   // chỉ chứa mảng string, muốn chứa number thì sẽ là any[]


6. Tuples
- Kiểu type limit length của 1 Array và chỉ định từng type cho từng phần tử trong Array
- Ví dụ chúng ta có 1 biến là Array: first element always is number và second element always is string

const person: {
    role: [number, string]
} = {
    role: [2, 'admin']
}

person.role.push('staff')              // Typescript can't catch this error
person.role = [2, 'admin', 'staff']    // error


7. Enum
- Thay vì
const ADMIN = 0
const USER = 1
if (isUser === USER)

- Thì có thể
enum Role { ADMIN, USER }
enum Role { ADMIN = 'Admin', USER = 100 }
if (isUser === Role.USER)


8. Union type
- Khi parameter có thể có nhiều type, có thể chứa string or number
const combine = (input1: string|number, input2: string|number) {}


9. Literal type
const combine = (
    input1: string|number,
    input2: string|number,
    type: 'as-string' | 'as-number'
) {}


10. Alias type
type Combinable = number | string
type TypeCombine = 'as-string' | 'as-number'
const combine = (
    input1: Combinable,
    input2: Combinable,
    type: TypeCombine
) {}

- Có thể tự tạo type cho riêng mình
type User = { name: string; age: number };
const user1: User = { name: 'Max', age: 30 };


11. Function type return and Callback type
- Mặc định Typescript có thể tự suy luận ra type trả về của các function dựa vào parameter và return
- Nhưng có thể make clearly bằng cách sau
const add = (number1: number, number2: number) : number => {
    return number1 + number2
}

const printResult = (sum: number): void => {    // doesn't return anything, thay vì undefined
    console.log('Result: ', add(4,5))
}

const printResult = (sum: number): undefined => {  // case hiếm khi
    console.log('Result: ', add(4,5))
    return
}

let printResult: (a: number) => number


12. Callback type
const addHandler = (n1: number, n2: number, cb: (num: number) => void) {
    const result = n1 + n2
    cb(result)
}


13. Unknown type
let userRes: unknown;
userRes = 5;
userRes = "43";
let user = "nice";
user = userRes;   => Type 'unknown' is not assignable to type 'string'


14. Generic type
function getRandomElement<T>(items: T[]): T {
    let randomIndex = Math.floor(Math.random() * items.length);
    return items[randomIndex];
}

let numbers = [1, 5, 7, 4, 2, 9];
let randomEle = getRandomElement<number>(numbers); 
console.log(randomEle);